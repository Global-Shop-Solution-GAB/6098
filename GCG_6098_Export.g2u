Program.Sub.Preflight.Start
Program.Sub.Preflight.End

Program.Sub.Main.Start
'GCG_6098_Export.g2u
'Trey S
'September 17th, 2020
'For Thomas Instruments
'Quote 12327-0
'Ticket 230520-6920201231-0
'This program will export vendors, POs, and accruals to CSVs into Cloudsnap/Concur

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.sPayTo.Declare(String)
V.Local.sCompany.Declare(String)

'check if supposed to be running
F.Intrinsic.Control.CallSub(GetSetting, "SETTING", "INTEGRATION_ENABLED", "DEFAULT", False)
F.Intrinsic.Control.If(V.Args.Setting)
	'check if already running
	F.Intrinsic.Control.CallSub(ScriptPIDCheck, "PROJECT", "6098", "TASK", "GCG_6098_Export")

	'export vendors
	F.Intrinsic.Control.CallSub(GetSetting, "SETTING", "VENDOR_EXPORT_PATH", "DEFAULT", "")
	F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
		F.Intrinsic.Control.CallSub(AddLog, "Project", "6098", "Task", "GCG_6098_Export", "Message", "Running vendor export...")

		F.Intrinsic.String.Build("select RTRIM(A.VENDOR) VENDOR_CODE, RTRIM(A.NAME_VENDOR) VENDOR_NAME, '' TAX_ID, '' DEFAULT_EXPENSE_TYPE_NAME, RTRIM(A.VENDOR) ADDRESS_ACCOUNTING_CODE, 'N' DELETE_VENDOR, RTRIM(B.CURRENCY) CURRENCY, RTRIM(A.ADDRESS1) ADDRESS1, RTRIM(A.ADDRESS2) ADDRESS2, RTRIM(C.ADDRESS3) ADDRESS3, RTRIM(A.CITY) CITY, RTRIM(A.STATE) STATE_OR_PROVINCE, RTRIM(A.CODE_ZIP) POSTAL_CODE, RTRIM(A.COUNTRY) COUNTRY, LTRIM(RTRIM(D.BUY_PHONE)) TELEPHONE_NUMBER, RTRIM(E.NAME_FIRST) CONTACT_FIRST_NAME, RTRIM(E.NAME_LAST) CONTACT_LAST_NAME, RTRIM(E.EMAIL1) CONTACT_EMAIL, '' NET_PAYMENT_TERMS, 'CLIENT' PAY_METHOD_TYPE, '30' ACCOUNT_NUMBER, '{0}' as CC from V_VENDOR_MASTER A left join V_VENDOR_CURR B on A.VENDOR = B.VENDOR left join V_VENDOR_INTL C on A.VENDOR = C.VENDOR left join V_VEND_MSTR_ADDL D on A.VENDOR = D.VEND_NO left join V_CONTACT E on A.VENDOR = E.CUST and E.TYPE = 'V' and E.PRI_CNTCT = 1 left join V_VENDOR_ADDL F on A.VENDOR = F.VENDOR where F.DATE_LAST_CHANGED >= '{1}'", V.Caller.CompanyCode, V.Ambient.Date.PervasiveDate, V.Local.sSQL)
		F.Intrinsic.Control.CallSub(ExportSQLToCSV, "SQL", V.Local.sSQL, "FILE_NAME", "VendorExport", "FILE_PATH", V.Args.Setting, "INCLUDE_HEADER", True)
	F.Intrinsic.Control.EndIf
	
	'export POs
	F.Intrinsic.Control.CallSub(GetSetting, "SETTING", "PO_EXPORT_PATH", "DEFAULT", "")
	F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
		F.Intrinsic.Control.CallSub(AddLog, "Project", "6098", "Task", "GCG_6098_Export", "Message", "Running PO export...")
		
		F.Intrinsic.Control.CallSub(Connection, "Connect", True)
		F.ODBC.Connection!Con.ExecuteAndReturn("select RTRIM(ADDRESS1) SHIPTO_ADDR, RTRIM(CITY) SHIPTO_CITY, RTRIM(STATE) SHIPTO_STATE, RTRIM(CODE_ZIP) SHIPTO_ZIP from V_COMPANY", V.Local.sCompany)
		F.ODBC.Connection!Con.ExecuteAndReturn("select RTRIM(ADDRESS1_PAY) BILLTO_ADDR, RTRIM(CITY_PAY) BILLTO_CITY, RTRIM(STATE_PAY) BILLTO_STATE, RTRIM(CODE_ZIP_PAY) BILLTO_ZIP from V_COMPANY_PAY_TO", V.Local.sPayTo)
		F.Intrinsic.Control.CallSub(Connection, "Connect", False)
		
		F.Intrinsic.String.Split(V.Local.sCompany, "*!*", V.Local.sCompany)
		F.Intrinsic.String.Split(V.Local.sPayTo, "*!*", V.Local.sPayTo)
		
		F.Intrinsic.String.Build("select RTRIM(A.PURCHASE_ORDER) PURCHASE_ORDER, SUBSTRING(DATE_ORDER, 6, 2) + '/' + SUBSTRING(DATE_ORDER, 9, 2) + '/' + LEFT(DATE_ORDER, 4) DATE_ORDER, RTRIM(A.VENDOR) VENDOR, CAST(Left(B.RECORD_NO, 3) as Integer) RECORD_NO, RTRIM(B.GL_ACCOUNT_LINE) GL_ACCOUNT_LINE, B.COST, B.QTY_ORDER, B.EXTENSION, SUBSTRING(B.DATE_LAST_CHG, 6, 2) + '/' + SUBSTRING(B.DATE_LAST_CHG, 9, 2) + '/' + LEFT(B.DATE_LAST_CHG, 4) DATE_LAST_CHG, B.TIME_LAST_CHG, '{2}' BILLTO_ADDR, '{3}' BILLTO_CITY, '{4}' BILLTO_STATE, '{5}' BILLTO_ZIP, '{6}' SHIPTO_ADDR, '{7}' SHIPTO_CITY, '{8}' SHIPTO_STATE, '{9}' SHIPTO_ZIP, '{0}' as CC from V_PO_HEADER A left join V_PO_LINES B on A.PURCHASE_ORDER = B.PURCHASE_ORDER where (B.FLAG_RECV_CLOSE = 'N' or B.FLAG_RECV_CLOSE = '') and A.DATE_ORDER = '{1}' and B.RECORD_NO <> '0000'", V.Caller.CompanyCode, V.Ambient.Date.PervasiveDate, V.Local.sPayTo(0), V.Local.sPayTo(1), V.Local.sPayTo(2), V.Local.sPayTo(3), V.Local.sCompany(0), V.Local.sCompany(1), V.Local.sCompany(2), V.Local.sCompany(3), V.Local.sSQL)
		F.Intrinsic.Control.CallSub(ExportSQLToCSV, "SQL", V.Local.sSQL, "FILE_NAME", "POExport", "FILE_PATH", V.Args.Setting, "INCLUDE_HEADER", True)
	F.Intrinsic.Control.EndIf
	
	'export accruals
	F.Intrinsic.Control.CallSub(GetSetting, "SETTING", "ACCRUAL_EXPORT_PATH", "DEFAULT", "")
	F.Intrinsic.Control.If(V.Args.Setting.Trim, !=, "")
		F.Intrinsic.Control.CallSub(AddLog, "Project", "6098", "Task", "GCG_6098_Export", "Message", "Running accrual export...")
		
		F.Intrinsic.String.Build("select RTRIM(GL_NUMBER) GL_NUMBER, SUBSTRING(POST_DATE, 5, 2) + '/' + RIGHT(POST_DATE, 2) + '/' + LEFT(POST_DATE, 4) POST_DATE, RTRIM(BATCH) BATCH, LINE, RTRIM(USERID) USERID, RTRIM(VENDOR) VENDOR, RTRIM(VENDOR_NAME) VENDOR_NAME, RTRIM(INVOICE_NO) INVOICE_NO, TRAN_TYPE, AP_CODE, RTRIM(PO_NUM) PO_NUM, RTRIM(RECEIVER) RECEIVER, QUANTITY, PO_LINE, AMOUNT_CMPNY, INVC_AMT_CMPNY, '{0}' as CC from V_GL_AP_DETAIL where BATCH like 'P%' and TRAN_TYPE = 7 and AP_CODE = 9 and POST_DATE = '{1}' and INVC_AMT_CMPNY > 0 order by POST_DATE desc", V.Caller.CompanyCode, V.Ambient.Date.FormatYYYYMMDD, V.Local.sSQL)
		F.Intrinsic.Control.CallSub(ExportSQLToCSV, "SQL", V.Local.sSQL, "FILE_NAME", "AccrualExport", "FILE_PATH", V.Args.Setting, "INCLUDE_HEADER", True)
	F.Intrinsic.Control.EndIf
	
	'cleanup / exit
	F.Intrinsic.Control.CallSub(Exit)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6098", "Task", "GCG_6098_Export", "Unattended", True, "ProjectTitle", "6098 Concur Cloudsnap Integration", "Callback", "Exit")
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.Exit.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.CallSub(Connection, "Connect", False)

F.Intrinsic.Control.CallSub(ScriptPIDClear, "PROJECT", "6098", "TASK", "GCG_6098_Export")

F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6098", "Task", "GCG_6098_Export", "Unattended", True, "ProjectTitle", "6098 Concur Cloudsnap Integration", "Callback", "Exit")
F.Intrinsic.Control.EndTry
Program.Sub.Exit.End

Program.Sub.ExportSQLToCSV.Start
'pass SQL
'pass FILE_NAME
'pass FILE_PATH
'pass INCLUDE_HEADER

F.Intrinsic.Control.Try

V.Local.sPath.Declare(String)
V.Local.sData.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sTitles.Declare(String)
V.Local.sMessage.Declare(String)

'get data
F.Intrinsic.Control.CallSub(Connection, "Connect", True)
F.Data.DataTable.CreateFromSQL("dtTemp", "Con", V.Args.SQL)
F.Intrinsic.Control.CallSub(Connection, "Connect", False)

'build file name
F.Intrinsic.String.Build("{0}.csv", V.Args.File_Name.Trim, V.Local.sFile)
F.Intrinsic.Control.CallSub(AppendFileName, "FILE", V.Local.sFile, "APPEND", V.Ambient.Now.FormatYYYY-MM-DD-HH-NN-SS)

'check directory
F.Intrinsic.Control.If(V.Args.FILE_PATH.Right1, !=, "/", AND, V.Args.FILE_PATH.Right1, !=, "\")
	F.Intrinsic.String.Build("{0}\", V.Args.FILE_PATH, V.Local.sPath)
F.Intrinsic.Control.Else
	V.Local.sPath.Set(V.Args.FILE_PATH)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.CallSub(CheckDirectories, "Directories", V.Local.sPath)

'export
F.Intrinsic.String.Build("{0}{1}", V.Local.sPath, V.Args.NEW_NAME, V.Local.sPath)

F.Intrinsic.String.Build("Creating export file [{0}]", V.Local.sPath, V.Local.sMessage)
F.Intrinsic.Control.CallSub(AddLog, "Project", "6098", "Task", "GCG_6098_Export", "Message", V.Local.sMessage)

F.Data.DataTable.SaveToCSV("dtTemp", V.Local.sPath, True)
F.Data.DataTable.Close("dtTemp")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6098", "Task", "GCG_6098_Export", "Unattended", True, "ProjectTitle", "6098 Concur Cloudsnap Integration", "Callback", "Exit")
F.Intrinsic.Control.EndTry
Program.Sub.ExportSQLToCSV.End

Program.Sub.AppendFileName.Start
'pass FILE
'pass APPEND
'returns NEW_NAME

F.Intrinsic.Control.Try

V.Local.sExtension.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sNewName.Declare(String)

F.Intrinsic.File.GetExtensionComponent(V.Args.File, V.Local.sExtension)
F.Intrinsic.String.Build(".{0}", V.Local.sExtension, V.Local.sExtension)
F.Intrinsic.String.Replace(V.Args.File, V.Local.sExtension, "", V.Local.sNewName)
F.Intrinsic.String.Build("{0}_{1}{2}", V.Local.sNewName, V.Args.Append, V.Local.sExtension, V.Local.sNewName)

F.Intrinsic.Variable.AddRV("NEW_NAME", V.Local.sNewName)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6098", "Task", "GCG_6098_Export", "Unattended", True, "ProjectTitle", "6098 Concur Cloudsnap Integration", "Callback", "Exit")
F.Intrinsic.Control.EndTry
Program.Sub.AppendFileName.End

Program.Sub.Connection.Start
'open or close connection if necessary, keep track of all connections

F.Intrinsic.Control.Try

V.Static.iConnections.Declare(Long)

F.Intrinsic.Control.If(V.Args.Connect)
	F.Intrinsic.Control.If(V.Static.iConnections, =, 0)
		F.ODBC.Connection!Con.OpenCompanyConnection(3000)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Math.Add(V.Static.iConnections, 1, V.Static.iConnections)
F.Intrinsic.Control.Else
	F.Intrinsic.Control.If(V.Static.iConnections, >, 0)
		F.Intrinsic.Math.Sub(V.Static.iConnections, 1, V.Static.iConnections)
		
		F.Intrinsic.Control.If(V.Static.iConnections, =, 0)
			F.ODBC.Connection!Con.Close
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6098", "Task", "GCG_6098_Export", "Unattended", True, "ProjectTitle", "6098 Concur Cloudsnap Integration", "Callback", "Exit")
F.Intrinsic.Control.EndTry
Program.Sub.Connection.End

Program.Sub.GetSetting.Start
'pass SETTING
'pass DEFAULT
'returns SETTING

F.Intrinsic.Control.Try

V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sSetting.Declare(String)

F.Intrinsic.String.Build("select RTRIM(VALUE) from GCG_6098_SETTINGS where NAME = '{0}'", V.Args.Setting, V.Local.sSQL)

F.Intrinsic.Control.CallSub(Connection, "Connect", True)
F.ODBC.Connection!Con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
F.Intrinsic.Control.CallSub(Connection, "Connect", False)

F.Intrinsic.Control.If(V.Ambient.ExecuteAndReturnEOF)
	V.Local.sSetting.Set(V.Args.Default)
F.Intrinsic.Control.Else
	F.Intrinsic.Control.If(V.Local.sRet.Trim, =, "")
		V.Local.sSetting.Set(V.Args.Default)
	F.Intrinsic.Control.Else
		V.Local.sSetting.Set(V.Local.sRet.Trim)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.AddRV("SETTING", V.Local.sSetting)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6098", "Task", "GCG_6098_Export", "Unattended", True, "ProjectTitle", "6098 Concur Cloudsnap Integration", "Callback", "Exit")
F.Intrinsic.Control.EndTry
Program.Sub.GetSetting.End

Program.Sub.CheckDirectories.Start
'check if the given import directories exist
'create them if they don't
'pass directories delimited with *!*

F.Intrinsic.Control.Try

V.Local.sDirectories.Declare(String)
V.Local.sPath.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.iCounter.Declare(Long)

V.Local.sDirectories.Set(V.Args.Directories)
F.Intrinsic.String.Split(V.Local.sDirectories, "*!*", V.Local.sDirectories)

F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sDirectories.UBound, 1)
	V.Local.sPath.Set(V.Local.sDirectories(V.Local.iCounter))
	F.Intrinsic.File.DirExists(V.Local.sPath, V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists.Not)
		F.Intrinsic.File.CreateDir(V.Local.sPath)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6098", "Task", "GCG_6098_Export", "Unattended", True, "ProjectTitle", "6098 Concur Cloudsnap Integration", "Callback", "Exit")
F.Intrinsic.Control.EndTry
Program.Sub.CheckDirectories.End

Program.Sub.AddLog.Start
'pass a project #, and a message
'date and time will be automatically added
'pass PROJECT (Folder)
'TASK what to name log
'MESSAGE (what to log)

F.Intrinsic.Control.Try

V.Local.sProject.Declare(String)
V.Local.sMessage.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sPath.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sContents.Declare(String)
V.Local.sTask.Declare(String)

V.Local.sProject.Set(V.Args.Project.Trim)
V.Local.sMessage.Set(V.Args.Message.Trim)
V.Local.sTask.Set(V.Args.Task)

F.Intrinsic.String.Replace(V.Local.sMessage, V.Ambient.NewLine, ", ", V.Local.sMessage)

F.Intrinsic.File.MakeFilenameFriendly(V.Local.sProject, V.Local.sProject)
F.Intrinsic.String.Build("{0}\Custom\{1}\{2}\Log", V.Caller.GlobalDir, V.Local.sProject, V.Caller.CompanyCode, V.Local.sPath)
F.Intrinsic.Control.CallSub(CheckDirectories, "DIRECTORIES", V.Local.sPath)

F.Intrinsic.String.Build("{0}\{1}_Log.txt", V.Local.sPath, V.Local.sTask, V.Local.sFile)
F.Intrinsic.File.Exists(V.Local.sFile, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists.Not)
	F.Intrinsic.String.Build("{0} {1}:{2}Log Start", V.Ambient.Date.FormatYYYY-MM-DD, V.Ambient.Time, V.Ambient.Tab, V.Local.sContents)
	F.Intrinsic.File.String2File(V.Local.sFile, V.Local.sContents)
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Build("{0} {1}:{2}{3}", V.Ambient.Date.FormatYYYY-MM-DD, V.Ambient.Time, V.Ambient.Tab, V.Local.sMessage, V.Local.sContents)
F.Intrinsic.File.Append2FileNewLine(V.Local.sFile, V.Local.sContents)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6098", "Task", "GCG_6098_Export", "Unattended", True, "ProjectTitle", "6098 Concur Cloudsnap Integration", "Callback", "Exit")
F.Intrinsic.Control.EndTry
Program.Sub.AddLog.End

Program.Sub.AddLogFile.Start
'pass a project #, and a message
'date and time will be automatically added
'pass PROJECT (Folder)
'pass type (subfolder)
'MESSAGE (what to log)

F.Intrinsic.Control.Try

V.Local.sProject.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sPath.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sContents.Declare(String)
V.Local.sName.Declare(String)

F.Intrinsic.File.MakeFilenameFriendly(V.Args.Project, V.Local.sProject)
F.Intrinsic.String.Build("{0}\Custom\{1}\{2}\Log\{3}\", V.Caller.GlobalDir, V.Local.sProject, V.Caller.CompanyCode, V.Args.Type, V.Local.sPath)
F.Intrinsic.Control.CallSub(CheckDirectories, "DIRECTORIES", V.Local.sPath)

F.Intrinsic.String.StripCharacters(V.Ambient.Now, V.Local.sName)

F.Intrinsic.String.Build("{0}\{1}_Log.txt", V.Local.sPath, V.Local.sName, V.Local.sFile)
F.Intrinsic.File.String2File(V.Local.sFile, V.Args.Message.Trim)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6098", "Task", "GCG_6098_Export", "Unattended", True, "ProjectTitle", "6098 Concur Cloudsnap Integration", "Callback", "Exit")
F.Intrinsic.Control.EndTry
Program.Sub.AddLogFile.End

Program.Sub.UnattendedErrorMessage.Start
'send a short error message, add the log
'pass project ID, project title (for message box title), and error message

F.Intrinsic.Control.Try

V.Local.sMessage.Declare(String)

V.Local.sMessage.Set(V.Args.Message.Trim)
F.Intrinsic.String.Replace(V.Local.sMessage, V.Ambient.NewLine, ", ", V.Local.sMessage)

F.Intrinsic.UI.InvokeWaitDialog(V.Local.sMessage, V.Args.ProjectTitle)
F.Intrinsic.UI.Sleep(10)
F.Intrinsic.UI.CloseWaitDialog

F.Intrinsic.Control.CallSub(AddLog, "Project", V.Args.Project, "TASK", V.Args.Task, "Message", V.Local.sMessage)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6098", "Task", "GCG_6098_Export", "Unattended", True, "ProjectTitle", "6098 Concur Cloudsnap Integration", "Callback", "Exit")
F.Intrinsic.Control.EndTry
Program.Sub.UnattendedErrorMessage.End

Program.Sub.ScriptPIDCheck.Start
'check if the process is already running
'store PID in a text file
'Pass folder to store in 	- PROJECT
'what to name file			- TASK

F.Intrinsic.Control.Try

V.Local.bExists.Declare(Boolean)
V.Local.sDir.Declare(String)
V.Local.sCurrentPIDProcess.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sProject.Declare(String)
V.Local.sTask.Declare(String)
V.Local.bRunning.Declare(Boolean, False)
V.Local.bPIDRunning.Declare(Boolean, False)
V.Local.sContents.Declare(String)

V.Local.sProject.Set(V.Args.Project)
V.Local.sTask.Set(V.Args.Task)

'check if running file exists
F.Intrinsic.String.Build("{0}\Custom\{1}\{2}\IS_RUNNING\{3}_Running.dat", V.Caller.GlobalDir, V.Local.sProject, V.Caller.CompanyCode, V.Local.sTask, V.Local.sFile)
F.Intrinsic.File.Exists(V.Local.sFile, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	'check if file / PID is valid
	F.Intrinsic.File.File2String(V.Local.sFile, V.Local.sContents)
	F.Intrinsic.String.Split(V.Local.sContents, V.Ambient.NewLine, V.Local.sContents)
	F.Intrinsic.String.Replace(V.Local.sContents(0), "PID: ", "", V.Local.sCurrentPIDProcess)
	V.Local.sContents.Redim(0, 0)
	F.Intrinsic.Control.If(V.Local.sCurrentPIDProcess.Long, >, 0)
		'check if PID is actually running
		F.Intrinsic.Task.PIDRunning(V.Local.sCurrentPIDProcess.Long, V.Local.bPIDRunning)
		F.Intrinsic.Control.If(V.Local.bPIDRunning)
			'the program is running
			V.Local.bRunning.Set(True)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Local.bRunning)
	'if it's already running, end here
	F.Intrinsic.Control.End
F.Intrinsic.Control.Else
	'delete the file if it exists
	F.Intrinsic.Control.If(V.Local.bExists)
		F.Intrinsic.File.DeleteFile(V.Local.sFile)
	F.Intrinsic.Control.EndIf
	
	'create lock file contents
	F.Intrinsic.String.Build("PID: {0}{1}Launch Time: {2}{1}GSS User: {3}{1}Terminal: {4}{1}Windows User: {5}{1}Machine: {6}{1}Hook: {7}{1}Caller: {8}{1}Script: {9}{1}Company Code: {10}", V.Ambient.PID, V.Ambient.NewLine, V.Ambient.Now, V.Caller.User, V.Caller.Terminal, V.System.UserName, V.System.ComputerName, V.Caller.Hook, V.Caller.Caller, V.Caller.ScriptFile, V.Caller.CompanyCode, V.Local.sContents)
	
	'create a new lock file
	F.Intrinsic.String.Build("{0}\Custom\{1}\{2}\IS_RUNNING", V.Caller.GlobalDir, V.Local.sProject, V.Caller.CompanyCode, V.Local.sDir)
	F.Intrinsic.Control.CallSub(CheckDirectories, "Directories", V.Local.sDir)
	F.Intrinsic.String.Build("{0}\{1}_Running.dat", V.Local.sDir, V.Local.sTask, V.Local.sFile)
	F.Intrinsic.File.String2File(V.Local.sFile, V.Local.sContents)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6098", "Task", "GCG_6098_Export", "Unattended", True, "ProjectTitle", "6098 Concur Cloudsnap Integration", "Callback", "Exit")
F.Intrinsic.Control.EndTry
Program.Sub.ScriptPIDCheck.End

Program.Sub.ScriptPIDClear.Start
'delete the is running file, so the next time the program runs it knows it isn't currently running
'Pass folder to store in 	- PROJECT
'filename  base				- TASK

F.Intrinsic.Control.Try

V.Local.bExists.Declare(Boolean)
V.Local.sFile.Declare(String)
V.Local.sProject.Declare(String)
V.Local.sTask.Declare(String)

V.Local.sProject.Set(V.Args.Project)
V.Local.sTask.Set(V.Args.Task)

F.Intrinsic.String.Build("{0}\Custom\{1}\{2}\IS_RUNNING\{3}_Running.dat", V.Caller.GlobalDir, V.Local.sProject, V.Caller.CompanyCode, V.Local.sTask, V.Local.sFile)
F.Intrinsic.File.Exists(V.Local.sFile, V.Local.bExists)

F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.File.DeleteFile(V.Local.sFile)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "WRITE_LOG_FILE", True, "Project", "6098", "Task", "GCG_6098_Export", "Unattended", True, "ProjectTitle", "6098 Concur Cloudsnap Integration", "Callback", "Exit")
F.Intrinsic.Control.EndTry
Program.Sub.ScriptPIDClear.End

Program.Sub.ErrorMessage.Start
'basic error message for replacing catch block
'this is really just for when printing the message and ending program
'pass error number, error description, current subroutine
'optional callback sub, this will be called before ending
'optional unattended parameters, those subs may not exist if not using them but won't be called

F.Intrinsic.Control.Try

V.Local.sError.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sCallback.Declare(String)
V.Local.sDoubleNewLine.Declare(String)

F.Intrinsic.String.Build("{6}{1}{1}Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}", V.Caller.ScriptFile, V.Ambient.Newline, V.Args.Subroutine, V.Args.ErrorNumber, V.Args.ErrorDescription, V.Ambient.GABVersion, V.Ambient.Now, V.Local.sError)

F.Intrinsic.Variable.ArgExists("UNATTENDED", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.Control.If(V.Args.UNATTENDED)
		F.Intrinsic.Control.CallSub(UnattendedErrorMessage, "MESSAGE", V.Local.sError, "PROJECT", V.Args.PROJECT, "PROJECTTITLE", V.Args.PROJECTTITLE, "TASK", V.Args.Task)
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox(V.Local.sError)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.ArgExists("WRITE_LOG_FILE", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.Control.If(V.Args.WRITE_LOG_FILE)
		F.Intrinsic.String.Build("{0}{0}", V.Ambient.NewLine, V.Local.sDoubleNewLine)
		F.Intrinsic.String.Replace(V.Local.sError, V.Local.sDoubleNewLine, V.Ambient.NewLine, V.Local.sError)
		
		F.Intrinsic.String.Build("Time: {0}{1}User: {2}{1}Windows User: {3}{1}Machine: {4}{1}PID: {5}{1}Terminal: {6}{1}Caller: {7}{1}Synchronous: {8}{1}Thread ID: {9}{1}Pervasive Client: {10}{1}GAB Version: {11}{1}GSS Version: {12}{1}Error: {13}{1}Error Description: {14}{1}Script: {15}{1}Subroutine: {16}", V.Ambient.Now, V.Ambient.NewLine, V.Caller.User, V.System.UserName, V.System.ComputerName, V.Ambient.PID, V.Caller.Terminal, V.Caller.Caller, V.Caller.Sync,  V.Ambient.ThreadID, V.Ambient.PervasiveClientVersion, V.Ambient.GABVersion, V.Caller.GSSVersion, V.Args.ErrorNumber, V.Args.ErrorDescription, V.Caller.ScriptFile, V.Args.Subroutine, V.Local.sError)
		
		F.Intrinsic.Control.CallSub(AddLogFile, "PROJECT", V.Args.Project, "TYPE", V.Args.Task, "MESSAGE", V.Local.sError)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.ArgExists("Callback", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	V.Local.sCallback.Set(V.Args.Callback.Trim)
	F.Intrinsic.Control.CallSub(V.Local.sCallback)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Caller.ScriptFile,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.ErrorMessage.End