Program.Sub.ScreenSU.Start
Gui.FormMaintenance..Create
Gui.FormMaintenance..Caption("Concur / Cloud Snap Integration Settings [6098]")
Gui.FormMaintenance..Size(9465,4020)
Gui.FormMaintenance..MinX(0)
Gui.FormMaintenance..MinY(0)
Gui.FormMaintenance..Position(0,0)
Gui.FormMaintenance..BackColor(-2147483633)
Gui.FormMaintenance..MousePointer(0)
Gui.FormMaintenance..Event(UnLoad,FormMaintenance_UnLoad)
Gui.FormMaintenance..MaxButton(False)
Gui.FormMaintenance..Sizeable(False)
Gui.FormMaintenance.chkEnabled.Create(CheckBox)
Gui.FormMaintenance.chkEnabled.Size(1830,360)
Gui.FormMaintenance.chkEnabled.Position(90,60)
Gui.FormMaintenance.chkEnabled.Caption("Integration Enabled")
Gui.FormMaintenance.chkEnabled.Event(Click,ChangesMade)
Gui.FormMaintenance.lblVendorExport.Create(Label,"Vendor Export Path:",True,1935,255,0,90,615,True,0,"Arial",8,-2147483633,0)
Gui.FormMaintenance.lblPOExport.Create(Label,"PO Export Path:",True,1935,255,0,90,1260,True,0,"Arial",8,-2147483633,0)
Gui.FormMaintenance.lblAccrualExport.Create(Label,"Accrual Export Path:",True,1935,255,0,90,1905,True,0,"Arial",8,-2147483633,0)
Gui.FormMaintenance.txtVendorExportPath.Create(TextBox,"",True,8805,300,0,90,825,True,0,"Arial",8,-2147483643,1)
Gui.FormMaintenance.txtVendorExportPath.Event(Change,ChangesMade)
Gui.FormMaintenance.txtPOExportPath.Create(TextBox,"",True,8805,300,0,90,1470,True,0,"Arial",8,-2147483643,1)
Gui.FormMaintenance.txtPOExportPath.Event(Change,ChangesMade)
Gui.FormMaintenance.txtAccrualExportPath.Create(TextBox,"",True,8805,300,0,90,2115,True,0,"Arial",8,-2147483643,1)
Gui.FormMaintenance.txtAccrualExportPath.Event(Change,ChangesMade)
Gui.FormMaintenance.cmdVendorPathBrowser.Create(Button)
Gui.FormMaintenance.cmdVendorPathBrowser.Size(375,375)
Gui.FormMaintenance.cmdVendorPathBrowser.Position(8910,780)
Gui.FormMaintenance.cmdVendorPathBrowser.Caption("^")
Gui.FormMaintenance.cmdVendorPathBrowser.Event(Click,cmdVendorPathBrowser_Click)
Gui.FormMaintenance.cmdPOPathBrowser.Create(Button)
Gui.FormMaintenance.cmdPOPathBrowser.Size(375,375)
Gui.FormMaintenance.cmdPOPathBrowser.Position(8910,1440)
Gui.FormMaintenance.cmdPOPathBrowser.Caption("^")
Gui.FormMaintenance.cmdPOPathBrowser.Event(Click,cmdPOPathBrowser_Click)
Gui.FormMaintenance.cmdAccrualPathBrowser.Create(Button)
Gui.FormMaintenance.cmdAccrualPathBrowser.Size(375,375)
Gui.FormMaintenance.cmdAccrualPathBrowser.Position(8910,2070)
Gui.FormMaintenance.cmdAccrualPathBrowser.Caption("^")
Gui.FormMaintenance.cmdAccrualPathBrowser.Event(Click,cmdAccrualPathBrowser_Click)
Gui.FormMaintenance.lblAPImport.Create(Label,"AP Batch Import Path",True,1935,255,0,90,2550,True,0,"Arial",8,-2147483633,0)
Gui.FormMaintenance.txtAPBatchImportPath.Create(TextBox,"",True,8805,300,0,90,2760,True,0,"Arial",8,-2147483643,1)
Gui.FormMaintenance.txtAPBatchImportPath.Event(Change,ChangesMade)
Gui.FormMaintenance.cmdAPBatchPathBrowser.Create(Button)
Gui.FormMaintenance.cmdAPBatchPathBrowser.Size(375,375)
Gui.FormMaintenance.cmdAPBatchPathBrowser.Position(8910,2730)
Gui.FormMaintenance.cmdAPBatchPathBrowser.Caption("^")
Gui.FormMaintenance.cmdAPBatchPathBrowser.Event(Click,cmdAPBatchPathBrowser_Click)
Gui.FormMaintenance.cmdSave.Create(Button)
Gui.FormMaintenance.cmdSave.Size(1005,375)
Gui.FormMaintenance.cmdSave.Position(8280,3300)
Gui.FormMaintenance.cmdSave.Caption("Save")
Gui.FormMaintenance.cmdSave.Event(Click,cmdSave_Click)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
V.Global.bUnsavedChanges.Declare(Boolean, False)
Program.Sub.Preflight.End

Program.Sub.Main.Start
'GCG_6098_Maintenance.g2u
'Trey S
'September 16th, 2020
'For Thomas Instruments
'Quote 12327-0
'Ticket 230520-6920201231-0
'This program is a maintenance menu for this integration

F.Intrinsic.Control.Try

F.Intrinsic.Control.CallSub(SetIcon)
F.Intrinsic.Control.CallSub(LoadSettings)
V.Global.bUnsavedChanges.Set(False)

GUI.FormMaintenance..Show
GUI.FormMaintenance..SetFocus

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormMaintenance_UnLoad", "WRITE_LOG_FILE", True, "Project", "6098", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.ChangesMade.Start
F.Intrinsic.Control.Try

V.Global.bUnsavedChanges.Set(True)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormMaintenance_UnLoad", "WRITE_LOG_FILE", True, "Project", "6098", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.ChangesMade.End

Program.Sub.LoadSettings.Start
'load previously saved settings

F.Intrinsic.Control.Try

F.Intrinsic.Control.CallSub(Connection, "Connect", True)
F.Data.DataTable.CreateFromSQL("dtLoadSettings", "Con", "select * from GCG_6098_SETTINGS")
F.Intrinsic.Control.CallSub(Connection, "Connect", False)

F.Data.DataView.Create("dtLoadSettings", "dvLoadSettings", 22, "[NAME] = 'INTEGRATION_ENABLED'", "")
F.Intrinsic.Control.If(V.DataView.dtLoadSettings!dvLoadSettings.RowCount, >, 0)
	GUI.FormMaintenance.chkEnabled.Value(V.DataView.dtLoadSettings!dvLoadSettings(0).VALUE!FieldValTrim)
F.Intrinsic.Control.EndIf

F.Data.DataView.SetFilter("dtLoadSettings", "dvLoadSettings", "[NAME] = 'VENDOR_EXPORT_PATH'")
F.Intrinsic.Control.If(V.DataView.dtLoadSettings!dvLoadSettings.RowCount, >, 0)
	GUI.FormMaintenance.txtVendorExportPath.Text(V.DataView.dtLoadSettings!dvLoadSettings(0).VALUE!FieldValTrim)
F.Intrinsic.Control.EndIf

F.Data.DataView.SetFilter("dtLoadSettings", "dvLoadSettings", "[NAME] = 'PO_EXPORT_PATH'")
F.Intrinsic.Control.If(V.DataView.dtLoadSettings!dvLoadSettings.RowCount, >, 0)
	GUI.FormMaintenance.txtPOExportPath.Text(V.DataView.dtLoadSettings!dvLoadSettings(0).VALUE!FieldValTrim)
F.Intrinsic.Control.EndIf

F.Data.DataView.SetFilter("dtLoadSettings", "dvLoadSettings", "[NAME] = 'ACCRUAL_EXPORT_PATH'")
F.Intrinsic.Control.If(V.DataView.dtLoadSettings!dvLoadSettings.RowCount, >, 0)
	GUI.FormMaintenance.txtAccrualExportPath.Text(V.DataView.dtLoadSettings!dvLoadSettings(0).VALUE!FieldValTrim)
F.Intrinsic.Control.EndIf

F.Data.DataView.SetFilter("dtLoadSettings", "dvLoadSettings", "[NAME] = 'AP_BATCH_IMPORT_PATH'")
F.Intrinsic.Control.If(V.DataView.dtLoadSettings!dvLoadSettings.RowCount, >, 0)
	GUI.FormMaintenance.txtAPBatchImportPath.Text(V.DataView.dtLoadSettings!dvLoadSettings(0).VALUE!FieldValTrim)
F.Intrinsic.Control.EndIf

F.Data.DataView.Close("dtLoadSettings", "dvLoadSettings")
F.Data.DataTable.Close("dtLoadSettings")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormMaintenance_UnLoad", "WRITE_LOG_FILE", True, "Project", "6098", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.LoadSettings.End

Program.Sub.FormMaintenance_UnLoad.Start
F.Intrinsic.Control.Try

V.Local.iRet.Declare(Long)

F.Intrinsic.Control.If(V.Global.bUnsavedChanges)
	F.Intrinsic.UI.Msgbox("Exit with unsaved changes?", "Unsaved Changes", 4, V.Local.iRet)
	F.Intrinsic.Control.If(V.Local.iRet, !=, V.Ambient.MsgBoxYes)
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormMaintenance_UnLoad", "WRITE_LOG_FILE", True, "Project", "6098", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.FormMaintenance_UnLoad.End

Program.Sub.cmdVendorPathBrowser_Click.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.CallSub(PathBrowser, "RETURN_CONTROL", "txtVendorExportPath")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormMaintenance_UnLoad", "WRITE_LOG_FILE", True, "Project", "6098", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdVendorPathBrowser_Click.End

Program.Sub.cmdPOPathBrowser_Click.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.CallSub(PathBrowser, "RETURN_CONTROL", "txtPOExportPath")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormMaintenance_UnLoad", "WRITE_LOG_FILE", True, "Project", "6098", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdPOPathBrowser_Click.End

Program.Sub.cmdAccrualPathBrowser_Click.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.CallSub(PathBrowser, "RETURN_CONTROL", "txtAccrualExportPath")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormMaintenance_UnLoad", "WRITE_LOG_FILE", True, "Project", "6098", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdAccrualPathBrowser_Click.End

Program.Sub.cmdAPBatchPathBrowser_Click.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.CallSub(PathBrowser, "RETURN_CONTROL", "txtAPBatchImportPath")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormMaintenance_UnLoad", "WRITE_LOG_FILE", True, "Project", "6098", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdAPBatchPathBrowser_Click.End

Program.Sub.PathBrowser.Start
'pass RETURN_CONTROL

F.Intrinsic.Control.Try

V.Local.sRet.Declare(String)

F.Intrinsic.UI.FolderBrowser("Select folder", -1, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.IsNotCancel)
	GUI.FormMaintenance.[V.Args.RETURN_CONTROL].Text(V.Local.sRet.Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormMaintenance_UnLoad", "WRITE_LOG_FILE", True, "Project", "6098", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.PathBrowser.End

Program.Sub.cmdSave_Click.Start
F.Intrinsic.Control.Try

F.Intrinsic.Control.CallSub(Connection, "Connect", True)

'grab schema
F.Data.DataTable.CreateFromSQL("dtSaveSettings", "Con", "select RTRIM(NAME) NAME, RTRIM(VALUE) VALUE from GCG_6098_SETTINGS where RECORD_ID = -1")
F.Data.DataTable.DeleteRow("dtSaveSettings")
F.Data.DataTable.AcceptChanges("dtSaveSettings")

F.Data.DataTable.AddRow("dtSaveSettings", "NAME", "INTEGRATION_ENABLED", "VALUE", V.Screen.FormMaintenance!chkEnabled.CheckedAsBoolean)
F.Data.DataTable.AddRow("dtSaveSettings", "NAME", "VENDOR_EXPORT_PATH", "VALUE", V.Screen.FormMaintenance!txtVendorExportPath.Text.Trim)
F.Data.DataTable.AddRow("dtSaveSettings", "NAME", "PO_EXPORT_PATH", "VALUE", V.Screen.FormMaintenance!txtPOExportPath.Text.Trim)
F.Data.DataTable.AddRow("dtSaveSettings", "NAME", "ACCRUAL_EXPORT_PATH", "VALUE", V.Screen.FormMaintenance!txtAccrualExportPath.Text.Trim)
F.Data.DataTable.AddRow("dtSaveSettings", "NAME", "AP_BATCH_IMPORT_PATH", "VALUE", V.Screen.FormMaintenance!txtAPBatchImportPath.Text.Trim)

F.Data.DataTable.SaveToDB("dtSaveSettings", "Con", "GCG_6098_SETTINGS", "NAME", 256)
F.Data.DataTable.Close("dtSaveSettings")

F.Intrinsic.Control.CallSub(Connection, "Connect", False)

V.Global.bUnsavedChanges.Set(False)

F.Intrinsic.UI.Msgbox("Settings saved successfully.")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormMaintenance_UnLoad", "WRITE_LOG_FILE", True, "Project", "6098", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.cmdSave_Click.End

Program.Sub.Connection.Start
'open or close connection if necessary, keep track of all connections

F.Intrinsic.Control.Try

V.Static.iConnections.Declare(Long)

F.Intrinsic.Control.If(V.Args.Connect)
	F.Intrinsic.Control.If(V.Static.iConnections, =, 0)
		F.ODBC.Connection!Con.OpenCompanyConnection
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Math.Add(V.Static.iConnections, 1, V.Static.iConnections)
F.Intrinsic.Control.Else
	F.Intrinsic.Control.If(V.Static.iConnections, >, 0)
		F.Intrinsic.Math.Sub(V.Static.iConnections, 1, V.Static.iConnections)
		
		F.Intrinsic.Control.If(V.Static.iConnections, =, 0)
			F.ODBC.Connection!Con.Close
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormMaintenance_UnLoad", "WRITE_LOG_FILE", True, "Project", "6098", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.Connection.End

Program.Sub.CheckDirectories.Start
'check if the given import directories exist
'create them if they don't
'pass directories delimited with *!*

F.Intrinsic.Control.Try

V.Local.sDirectories.Declare(String)
V.Local.sPath.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.iCounter.Declare(Long)

V.Local.sDirectories.Set(V.Args.Directories)
F.Intrinsic.String.Split(V.Local.sDirectories, "*!*", V.Local.sDirectories)

F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sDirectories.UBound, 1)
	V.Local.sPath.Set(V.Local.sDirectories(V.Local.iCounter))
	F.Intrinsic.File.DirExists(V.Local.sPath, V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists.Not)
		F.Intrinsic.File.CreateDir(V.Local.sPath)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCounter)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormMaintenance_UnLoad", "WRITE_LOG_FILE", True, "Project", "6098", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.CheckDirectories.End

Program.Sub.AddLogFile.Start
'pass a project #, and a message
'date and time will be automatically added
'pass PROJECT (Folder)
'pass type (subfolder)
'MESSAGE (what to log)

F.Intrinsic.Control.Try

V.Local.sProject.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sPath.Declare(String)
V.Local.sFile.Declare(String)
V.Local.sContents.Declare(String)
V.Local.sName.Declare(String)

F.Intrinsic.File.MakeFilenameFriendly(V.Args.Project, V.Local.sProject)
F.Intrinsic.String.Build("{0}\Custom\{1}\{2}\Log\{3}\", V.Caller.GlobalDir, V.Local.sProject, V.Caller.CompanyCode, V.Args.Type, V.Local.sPath)
F.Intrinsic.Control.CallSub(CheckDirectories, "DIRECTORIES", V.Local.sPath)

F.Intrinsic.String.StripCharacters(V.Ambient.Now, V.Local.sName)

F.Intrinsic.String.Build("{0}\{1}_Log.txt", V.Local.sPath, V.Local.sName, V.Local.sFile)
F.Intrinsic.File.String2File(V.Local.sFile, V.Args.Message.Trim)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormMaintenance_UnLoad", "WRITE_LOG_FILE", True, "Project", "6098", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.AddLogFile.End

Program.Sub.SetIcon.Start
F.Intrinsic.Control.Try

V.Local.sForm.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sIcon.Declare(String)
V.Local.iCounter.Declare(Long)

F.Intrinsic.String.Build("{0}\ART\gss2.ico",V.Caller.GlobalDir,v.Local.sIcon)
F.Intrinsic.File.Exists(V.Local.sIcon, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists.Not)
	F.Intrinsic.String.Build("{0}\GAB\GAS\gss2.ico",V.Caller.PluginsDir,v.Local.sIcon)
	F.Intrinsic.File.Exists(V.Local.sIcon, V.Local.bExists)
	F.Intrinsic.Control.If(V.Local.bExists.Not)
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.UI.GetFormList(V.Local.sForm)
F.Intrinsic.String.Split(V.Local.sForm, "*!*", V.Local.sForm)

F.Intrinsic.Control.For(V.Local.iCounter, 0, V.Local.sForm.UBound, 1)
	Gui.[V.Local.sForm(V.Local.iCounter)]..Icon(V.Local.sIcon)
F.Intrinsic.Control.Next(V.Local.iCounter)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "Callback", "FormMaintenance_UnLoad", "WRITE_LOG_FILE", True, "Project", "6098", "Task", "Maintenance Menu")
F.Intrinsic.Control.EndTry
Program.Sub.SetIcon.End

Program.Sub.ErrorMessage.Start
'basic error message for replacing catch block
'this is really just for when printing the message and ending program
'pass error number, error description, current subroutine
'optional callback sub, this will be called before ending
'optional unattended parameters, those subs may not exist if not using them but won't be called

F.Intrinsic.Control.Try

V.Local.sError.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sCallback.Declare(String)
V.Static.bError.Declare(Boolean, False)
V.Local.sDoubleNewLine.Declare(String)

'make sure we aren't in an error loop
F.Intrinsic.Control.If(V.Static.bError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndIf
V.Static.bError.Set(True)

F.Intrinsic.String.Build("{6}{1}{1}Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}", V.Caller.ScriptFile, V.Ambient.Newline, V.Args.Subroutine, V.Args.ErrorNumber, V.Args.ErrorDescription, V.Ambient.GABVersion, V.Ambient.Now, V.Local.sError)

F.Intrinsic.Variable.ArgExists("UNATTENDED", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.Control.If(V.Args.UNATTENDED)
		F.Intrinsic.Control.CallSub(UnattendedErrorMessage, "MESSAGE", V.Local.sError, "PROJECT", V.Args.PROJECT, "PROJECTTITLE", V.Args.PROJECTTITLE, "TASK", V.Args.Task)
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox(V.Local.sError)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.ArgExists("WRITE_LOG_FILE", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.Control.If(V.Args.WRITE_LOG_FILE)
		F.Intrinsic.String.Build("{0}{0}", V.Ambient.NewLine, V.Local.sDoubleNewLine)
		F.Intrinsic.String.Replace(V.Local.sError, V.Local.sDoubleNewLine, V.Ambient.NewLine, V.Local.sError)
		
		F.Intrinsic.String.Build("Time: {0}{1}User: {2}{1}Windows User: {3}{1}Machine: {4}{1}PID: {5}{1}Terminal: {6}{1}Caller: {7}{1}Synchronous: {8}{1}Thread ID: {9}{1}Pervasive Client: {10}{1}GAB Version: {11}{1}GSS Version: {12}{1}Error: {13}{1}Error Description: {14}{1}Script: {15}{1}Subroutine: {16}", V.Ambient.Now, V.Ambient.NewLine, V.Caller.User, V.System.UserName, V.System.ComputerName, V.Ambient.PID, V.Caller.Terminal, V.Caller.Caller, V.Caller.Sync,  V.Ambient.ThreadID, V.Ambient.PervasiveClientVersion, V.Ambient.GABVersion, V.Caller.GSSVersion, V.Args.ErrorNumber, V.Args.ErrorDescription, V.Caller.ScriptFile, V.Args.Subroutine, V.Local.sError)
		
		F.Intrinsic.Control.CallSub(AddLogFile, "PROJECT", V.Args.Project, "TYPE", V.Args.Task, "MESSAGE", V.Local.sError)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.ArgExists("Callback", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	V.Local.sCallback.Set(V.Args.Callback.Trim)
	F.Intrinsic.Control.CallSub(V.Local.sCallback)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Caller.ScriptFile,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End
F.Intrinsic.Control.EndTry
Program.Sub.ErrorMessage.End
